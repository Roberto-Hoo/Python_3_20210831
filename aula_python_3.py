# -*- coding: utf-8 -*-
"""aula_python_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sP_RdaM20iTvOqKN86yoskCS9GJfvjrw

# Revisão

**Comando if**
"""

x=20
if x < 0:
    print("x é negativo")
elif x == 0:
    print("x é igual a zero")
else:
    print("x é positivo")

"""**Comando for**"""

alunos=['João', 'Maria', 'José', 'Ana']
for nome in alunos:
    print(nome,len(nome))

l=[2,7,9,25,48]
for i in l:
    print(i)

"""**Função range()**"""

for k in range(2,9,3):
    print(k)

for i in range(len(l)):
    print(l[i])

"""**Comandos break e continue**"""

for letra in "palavra":
    if letra == "l":
        break
    print(letra)

print("Fim")

for letra in "palavra":
    if letra == "l":
        continue
    print(letra)

print("Fim")

"""Podemos usar a cláusula else para loops também!"""

for i in range(1, 4): 
    print(i) 
else: 
    print("isto é escrito já que não há break no for :)")

# algoritmo para buscar números primos até 10
for n in range(2, 11):    
   # print('n é',n) 
    for x in range(2, n):    # loop de 2 a n-1
      #  print('x é',x)
        if n % x == 0:       # verifica se n é divisível por x
            print(n, 'igual', x, '*', n//x)
            break
    else:
        print(n, 'é um número primo')

"""# Atividade da última aula: sequência de Fibonacci

Um algoritmo para imprimir os 20 primeiros números da Sequência de Fibonacci
"""

i=0     # define os dois primeiros números da sequência
j=1
print(i)
print(j)
contador=3                # inicializa o contador 
while contador <= 20:     # loop para determinar do terceiro ao vigésimo número da sequência
    k=i+j                 # calcula o novo número da sequência k como a soma do último (j) e penúltimo (i) números
    print(k)              # imprime novo número calculado
    i=j                   # atualiza o i
    j=k                   # atualiza o j
    contador+=1           # atualiza o contador

"""Para ajudar na visualização de como o algoritmo funciona

$0 ~1 ~1 ~ 2~ 3 ~5 ~8 ... $

$i ~ ~j ~k$

$~~~ i  ~j ~~k$

$~~~~~ i  ~~j ~~k$

Um algoritmo para imprimir os 20 primeiros números da Sequência de Fibonacci (mesmo algoritmo que o acima, só um pouco mais conciso)
"""

i,j=0,1
print(i)
print(j)
contador=3
while contador <= 20:
    print(i+j)
    i,j=j,i+j   # atualiza variáveis i e j
    contador+=1

"""Mesmo algoritmo do exemplo acima, mas agora com um loop for"""

i,j=0,1
print(i)
print(j)
for m in range(3,21):
    print(i+j)
    i,j=j,i+j   # atualiza simultaneamente as variáveis i e j

"""Outro algoritmo para imprimir os 20 primeiros números da Sequência de Fibonacci, agora usando listas

"""

l=[0,1]   #adiciona os dois primeiros números da sequência na lista l
contador=3           # inicializa o contador
while contador <= 20:       # loop para determinar do terceiro ao vigésimo número da sequência
    l.append(l[-1]+l[-2])   # coloca ao final da lista l a soma dos dois últimos elementos dessa lista
   
    contador+=1             # atualiza o contador 
print(l)

"""# Funções

def inicia a definição de uma função
"""

def minha_funcao():
    print('Olá! Esta é a minha função!')
    
minha_funcao()

def minha_funcao_com_argumentos(nome,saudacao):
    print('Olá, %s! Esta é a minha função! %s'%(nome,saudacao))
    
minha_funcao_com_argumentos('Cristina','Bem-vinda!')

"""Funções podem retornar um valor, utilizando o comando return"""

def soma(a,b):
    return a+b

soma(3,7)

"""Funções com argumentos com valor padrão:"""

def minha_funcao_com_argumentos_padrao(nome='Fulano',saudacao='Seja feliz!'):
    print('Olá, %s! Esta é a minha função! %s'%(nome,saudacao))
    
minha_funcao_com_argumentos_padrao('Cristina','Bem-vinda!')

minha_funcao_com_argumentos_padrao('Cristina')

minha_funcao_com_argumentos_padrao()

"""Função para escrever sequência de Fibonacci até o número n:"""

def fib(n): 
    """Imprime os números da sequência de Fibonacci ATÉ o número n.
     
     Isto é uma String de documentação (docstring). 
     Algumas ferramentas de documentação utilizam as docstrings para produzir 
     automaticamente a documentação online ou permitir que o usuário navegue 
     mais facilmente pelo código. 
     
     É uma boa prática de programação incluir sempre docstrings nas suas funções!! ;)
    
    """
    i, j = 0, 1
    while i < n:
        print(i, end=' ')  #O argumento end pode ser usado para evitar uma nova linha após a saída
        i,j=j,i+j

fib

fib(20)

fib(0)

print(fib(0))  #Mesmo funções que não usam o comando return devolvem um valor.

"""Podemos escrever uma função que devolve uma lista de números da sequência de Fibonacci:"""

def fib_lista(n): 
    """
    Função que retorna uma lista contendo os números da sequência de Fibonacci 
    até o número n.
    """
    lista=[]
    i, j = 0, 1
    while i < n:
        lista.append(i)
        i,j=j,i+j
    return lista


f20=fib_lista(20)
f20

fib_lista(20)

"""O comando return finaliza a execução da função e retorna o seu valor. return sem qualquer expressão como argumento 
devolve None e se a função atinge o final e não há comando return, ela também devolve None.
Exemplo:
"""

print(minha_funcao())

def verificacao(pergunta, tentativas=2, lembrete='Tente novamente!'):
    while True:
        resposta = input(pergunta)
        if resposta in ('s', 'si', 'sim'):
            return True
        if resposta in ('n', 'na', 'não', 'nao'):
            return False
        tentativas = tentativas - 1
        if tentativas < 0:
            print('Resposta inválida')
            break
        print(lembrete)
 
verificacao('Você deseja cancelar?')

"""No exemplo acima introduzimos a palavra-chave in, que verifica se uma sequência contém ou não um determinado valor. 
Também introduzimos a função input, que recebe um valor dado pelo usuário. É preciso pressionar Enter para o código prosseguir após fornecer o valor para a função input. A função input possui um parâmetro opcional, conhecido como prompt, que é uma string que aparece na tela toda vez que a função é chamada. 

Na função acima, o argumento 'pergunta' é obrigatório e os outros argumentos, na forma chave=valor, são opcionais. A função pode ser chamada das seguintes formas:
"""

verificacao('Você deseja salvar o arquivo?',1)

verificacao('Você deseja salvar o arquivo?',lembrete='É assim tão difícil digitar sim ou não?')

verificacao('Você deseja salvar o arquivo?',1, 'Responda sim ou não!!')

verificacao(lembrete='Tente mais uma vez', pergunta='Você deseja sobrescrever o arquivo?')

"""Já as seguintes formas de chamar a função verificação são inválidas:"""

verificacao()

verificacao(question='Tem certeza que deseja excluir?')

verificacao('Tem certeza?',pergunta='isso mesmo?')

"""Funções anônimas podem ser criadas com a palavra-chave lambda. As funções lambdas são restritas a uma única (em geral pequena) expressão. """

def quadrado(x):
    return x**2

f=quadrado(7)
print(f)

f2 = lambda x: x**2

f2(6)

f_soma = lambda a,b: a+b
f_soma(5,9)

def incrementar(n):
    return lambda x: x+n

f=incrementar(6)
f(9)

f3=lambda x: x+4
f3(9)

"""# Estrutura de dados

Veja a seguir mais métodos de objetos do tipo lista:
"""

l=[5,18,43,77,91,18,77]

"""Adicionar um elemento ao final da lista"""

l.append(100)
print(l)

"""Inserir um elemento em uma dada posição. Nesse caso insere o elemento 9 na posição de índice 1. """

l.insert(1,9)
print(l)

"""Remover o primeiro elemento da lista que tem valor igual ao argumento (nesse caso remove o elemento 18)"""

l.remove(18)
print(l)

"""Contar o número de vezes que um elemento aparece na lista"""

l.count(77)

print(l)

"""Remover o elemento em uma dada posição. Esse método remove o elemento e o retorna. 

Nesse caso remove o elemento de índice 1.
"""

l.pop(1)

print(l)

"""Devolver o índice do primeiro elemento cujo valor é igual ao argumento (nesse caso 91)

"""

l.index(91)

l.index(77)

l.index(53)

"""Ordenar os elementos da lista"""

l.sort()
print(l)

"""Ordenar em ordem reversa"""

l=[5, 43, 77, 91, 18, 77, 100]
l.sort(reverse=True)  
print(l)

"""Inverter a ordem dos elementos"""

l=[5, 43, 77, 91, 18, 77, 100]
l.reverse()   
print(l)

"""Copiar os elementos da lista"""

l_c=l.copy()
print(l_c)

"""Para iterar sobre uma lista, a posição e o valor podem ser obtidos simultaneamente com a função enumerate()"""



for i, v in enumerate(l_c):
    print(i,v)

"""Para percorrer duas ou mais listas ao mesmo tempo, as entradas podem ser pareadas com a função zip()"""

l1=[2.5,3.9,8.7]
l2=[8.7,23.4,12.5]
for a,b in zip(l1,l2):
    print(a,b)

"""Uma lista pode ser percorrida na ordem inversa com a função reversed()"""

for z in reversed(range(10)):
    print(z)

"""# Atividade

**Exercício 1:**

Responda ao questionário que está no Moodle.

**Exercício 2:**

Em Python, peça para o usuário entrar com um valor de temperatura em Celsius, transforme para Fahrenheit e imprima o valor na tela. Use uma função em Python para realizar a conversão de temperaturas. (Não é necessário entregar)

**Exercício 3:**

Crie uma função em Python para determinar os zeros da equação de segundo grau a*x**2 + b*x + c = 0. Não esqueça de levar em consideração as limitações e ambiguidades do algoritmo que fará este cálculo. (Não é necessário entregar)
"""